=begin
#Finnhub API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module FinnhubRuby
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Aggregate Indicators
    # Get aggregate signal of multiple technical indicators such as MACD, RSI, Moving Average v.v.
    # @param symbol [String] symbol
    # @param resolution [String] Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
    # @param [Hash] opts the optional parameters
    # @return [AggregateIndicators]
    def aggregate_indicator(symbol, resolution, opts = {})
      data, _status_code, _headers = aggregate_indicator_with_http_info(symbol, resolution, opts)
      data
    end

    # Aggregate Indicators
    # Get aggregate signal of multiple technical indicators such as MACD, RSI, Moving Average v.v.
    # @param symbol [String] symbol
    # @param resolution [String] Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AggregateIndicators, Integer, Hash)>] AggregateIndicators data, response status code and response headers
    def aggregate_indicator_with_http_info(symbol, resolution, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.aggregate_indicator ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling DefaultApi.aggregate_indicator"
      end
      # verify the required parameter 'resolution' is set
      if @api_client.config.client_side_validation && resolution.nil?
        fail ArgumentError, "Missing the required parameter 'resolution' when calling DefaultApi.aggregate_indicator"
      end
      # resource path
      local_var_path = '/scan/technical-indicator'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbol'] = symbol
      query_params[:'resolution'] = resolution

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'AggregateIndicators' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#aggregate_indicator\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Basic Financials
    # Get company basic financials such as margin, P/E ratio, 52-week high/low etc.
    # @param symbol [String] Symbol of the company: AAPL.
    # @param metric [String] Metric type. Can be 1 of the following values &lt;code&gt;all, price, valuation, margin&lt;/code&gt;
    # @param [Hash] opts the optional parameters
    # @return [BasicFinancials]
    def company_basic_financials(symbol, metric, opts = {})
      data, _status_code, _headers = company_basic_financials_with_http_info(symbol, metric, opts)
      data
    end

    # Basic Financials
    # Get company basic financials such as margin, P/E ratio, 52-week high/low etc.
    # @param symbol [String] Symbol of the company: AAPL.
    # @param metric [String] Metric type. Can be 1 of the following values &lt;code&gt;all, price, valuation, margin&lt;/code&gt;
    # @param [Hash] opts the optional parameters
    # @return [Array<(BasicFinancials, Integer, Hash)>] BasicFinancials data, response status code and response headers
    def company_basic_financials_with_http_info(symbol, metric, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.company_basic_financials ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling DefaultApi.company_basic_financials"
      end
      # verify the required parameter 'metric' is set
      if @api_client.config.client_side_validation && metric.nil?
        fail ArgumentError, "Missing the required parameter 'metric' when calling DefaultApi.company_basic_financials"
      end
      # resource path
      local_var_path = '/stock/metric'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbol'] = symbol
      query_params[:'metric'] = metric

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'BasicFinancials' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#company_basic_financials\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Earnings Surprises
    # Get company historical quarterly earnings surprise going back to 2000.
    # @param symbol [String] Symbol of the company: AAPL.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Limit number of period returned. Leave blank to get the full history.
    # @return [Array<EarningResult>]
    def company_earnings(symbol, opts = {})
      data, _status_code, _headers = company_earnings_with_http_info(symbol, opts)
      data
    end

    # Earnings Surprises
    # Get company historical quarterly earnings surprise going back to 2000.
    # @param symbol [String] Symbol of the company: AAPL.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Limit number of period returned. Leave blank to get the full history.
    # @return [Array<(Array<EarningResult>, Integer, Hash)>] Array<EarningResult> data, response status code and response headers
    def company_earnings_with_http_info(symbol, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.company_earnings ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling DefaultApi.company_earnings"
      end
      # resource path
      local_var_path = '/stock/earnings'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbol'] = symbol
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<EarningResult>' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#company_earnings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Earnings Estimates
    # Get company's EPS estimates.
    # @param symbol [String] Symbol of the company: AAPL.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :freq Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;
    # @return [EarningsEstimates]
    def company_eps_estimates(symbol, opts = {})
      data, _status_code, _headers = company_eps_estimates_with_http_info(symbol, opts)
      data
    end

    # Earnings Estimates
    # Get company&#39;s EPS estimates.
    # @param symbol [String] Symbol of the company: AAPL.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :freq Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;
    # @return [Array<(EarningsEstimates, Integer, Hash)>] EarningsEstimates data, response status code and response headers
    def company_eps_estimates_with_http_info(symbol, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.company_eps_estimates ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling DefaultApi.company_eps_estimates"
      end
      # resource path
      local_var_path = '/stock/eps-estimate'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbol'] = symbol
      query_params[:'freq'] = opts[:'freq'] if !opts[:'freq'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'EarningsEstimates' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#company_eps_estimates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Company Executive
    # Get a list of company's executives and members of the Board.
    # @param symbol [String] Symbol of the company: AAPL.
    # @param [Hash] opts the optional parameters
    # @return [CompanyExecutive]
    def company_executive(symbol, opts = {})
      data, _status_code, _headers = company_executive_with_http_info(symbol, opts)
      data
    end

    # Company Executive
    # Get a list of company&#39;s executives and members of the Board.
    # @param symbol [String] Symbol of the company: AAPL.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CompanyExecutive, Integer, Hash)>] CompanyExecutive data, response status code and response headers
    def company_executive_with_http_info(symbol, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.company_executive ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling DefaultApi.company_executive"
      end
      # resource path
      local_var_path = '/stock/executive'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbol'] = symbol

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'CompanyExecutive' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#company_executive\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Company News
    # List latest company news by symbol. This endpoint is only available for North American companies.
    # @param symbol [String] Company symbol.
    # @param from [Date] From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
    # @param to [Date] To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
    # @param [Hash] opts the optional parameters
    # @return [Array<News>]
    def company_news(symbol, from, to, opts = {})
      data, _status_code, _headers = company_news_with_http_info(symbol, from, to, opts)
      data
    end

    # Company News
    # List latest company news by symbol. This endpoint is only available for North American companies.
    # @param symbol [String] Company symbol.
    # @param from [Date] From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
    # @param to [Date] To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<News>, Integer, Hash)>] Array<News> data, response status code and response headers
    def company_news_with_http_info(symbol, from, to, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.company_news ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling DefaultApi.company_news"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.company_news"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling DefaultApi.company_news"
      end
      # resource path
      local_var_path = '/company-news'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbol'] = symbol
      query_params[:'from'] = from
      query_params[:'to'] = to

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<News>' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#company_news\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Peers
    # Get company peers. Return a list of peers in the same country and GICS sub-industry
    # @param symbol [String] Symbol of the company: AAPL.
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def company_peers(symbol, opts = {})
      data, _status_code, _headers = company_peers_with_http_info(symbol, opts)
      data
    end

    # Peers
    # Get company peers. Return a list of peers in the same country and GICS sub-industry
    # @param symbol [String] Symbol of the company: AAPL.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Integer, Hash)>] Array<String> data, response status code and response headers
    def company_peers_with_http_info(symbol, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.company_peers ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling DefaultApi.company_peers"
      end
      # resource path
      local_var_path = '/stock/peers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbol'] = symbol

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<String>' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#company_peers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Company Profile
    # Get general information of a company. You can query by symbol, ISIN or CUSIP
    # @param [Hash] opts the optional parameters
    # @option opts [String] :symbol Symbol of the company: AAPL e.g.
    # @option opts [String] :isin ISIN
    # @option opts [String] :cusip CUSIP
    # @return [CompanyProfile]
    def company_profile(opts = {})
      data, _status_code, _headers = company_profile_with_http_info(opts)
      data
    end

    # Company Profile
    # Get general information of a company. You can query by symbol, ISIN or CUSIP
    # @param [Hash] opts the optional parameters
    # @option opts [String] :symbol Symbol of the company: AAPL e.g.
    # @option opts [String] :isin ISIN
    # @option opts [String] :cusip CUSIP
    # @return [Array<(CompanyProfile, Integer, Hash)>] CompanyProfile data, response status code and response headers
    def company_profile_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.company_profile ...'
      end
      # resource path
      local_var_path = '/stock/profile'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbol'] = opts[:'symbol'] if !opts[:'symbol'].nil?
      query_params[:'isin'] = opts[:'isin'] if !opts[:'isin'].nil?
      query_params[:'cusip'] = opts[:'cusip'] if !opts[:'cusip'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'CompanyProfile' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#company_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Company Profile 2
    # Get general information of a company. You can query by symbol, ISIN or CUSIP. This is the free version of <a href=\"#company-profile\">Company Profile</a>.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :symbol Symbol of the company: AAPL e.g.
    # @option opts [String] :isin ISIN
    # @option opts [String] :cusip CUSIP
    # @return [CompanyProfile2]
    def company_profile2(opts = {})
      data, _status_code, _headers = company_profile2_with_http_info(opts)
      data
    end

    # Company Profile 2
    # Get general information of a company. You can query by symbol, ISIN or CUSIP. This is the free version of &lt;a href&#x3D;\&quot;#company-profile\&quot;&gt;Company Profile&lt;/a&gt;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :symbol Symbol of the company: AAPL e.g.
    # @option opts [String] :isin ISIN
    # @option opts [String] :cusip CUSIP
    # @return [Array<(CompanyProfile2, Integer, Hash)>] CompanyProfile2 data, response status code and response headers
    def company_profile2_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.company_profile2 ...'
      end
      # resource path
      local_var_path = '/stock/profile2'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbol'] = opts[:'symbol'] if !opts[:'symbol'].nil?
      query_params[:'isin'] = opts[:'isin'] if !opts[:'isin'].nil?
      query_params[:'cusip'] = opts[:'cusip'] if !opts[:'cusip'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'CompanyProfile2' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#company_profile2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Revenue Estimates
    # Get company's revenue estimates.
    # @param symbol [String] Symbol of the company: AAPL.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :freq Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;
    # @return [RevenueEstimates]
    def company_revenue_estimates(symbol, opts = {})
      data, _status_code, _headers = company_revenue_estimates_with_http_info(symbol, opts)
      data
    end

    # Revenue Estimates
    # Get company&#39;s revenue estimates.
    # @param symbol [String] Symbol of the company: AAPL.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :freq Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;
    # @return [Array<(RevenueEstimates, Integer, Hash)>] RevenueEstimates data, response status code and response headers
    def company_revenue_estimates_with_http_info(symbol, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.company_revenue_estimates ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling DefaultApi.company_revenue_estimates"
      end
      # resource path
      local_var_path = '/stock/revenue-estimate'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbol'] = symbol
      query_params[:'freq'] = opts[:'freq'] if !opts[:'freq'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'RevenueEstimates' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#company_revenue_estimates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Country Metadata
    # List all countries and metadata.
    # @param [Hash] opts the optional parameters
    # @return [Array<CountryMetadata>]
    def country(opts = {})
      data, _status_code, _headers = country_with_http_info(opts)
      data
    end

    # Country Metadata
    # List all countries and metadata.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CountryMetadata>, Integer, Hash)>] Array<CountryMetadata> data, response status code and response headers
    def country_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.country ...'
      end
      # resource path
      local_var_path = '/country'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<CountryMetadata>' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#country\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # COVID-19
    # Get real-time updates on the number of COVID-19 (Corona virus) cases in the US with a state-by-state breakdown. Data is sourced from CDC and reputable sources. You can also access this API <a href=\"https://rapidapi.com/Finnhub/api/finnhub-real-time-covid-19\" target=\"_blank\" rel=\"nofollow\">here</a>
    # @param [Hash] opts the optional parameters
    # @return [Array<CovidInfo>]
    def covid19(opts = {})
      data, _status_code, _headers = covid19_with_http_info(opts)
      data
    end

    # COVID-19
    # Get real-time updates on the number of COVID-19 (Corona virus) cases in the US with a state-by-state breakdown. Data is sourced from CDC and reputable sources. You can also access this API &lt;a href&#x3D;\&quot;https://rapidapi.com/Finnhub/api/finnhub-real-time-covid-19\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;nofollow\&quot;&gt;here&lt;/a&gt;
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CovidInfo>, Integer, Hash)>] Array<CovidInfo> data, response status code and response headers
    def covid19_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.covid19 ...'
      end
      # resource path
      local_var_path = '/covid19/us'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<CovidInfo>' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#covid19\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Crypto Candles
    # Get candlestick data for crypto symbols.
    # @param symbol [String] Use symbol returned in &lt;code&gt;/crypto/symbol&lt;/code&gt; endpoint for this field.
    # @param resolution [String] Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
    # @param from [Integer] UNIX timestamp. Interval initial value.
    # @param to [Integer] UNIX timestamp. Interval end value.
    # @param [Hash] opts the optional parameters
    # @return [CryptoCandles]
    def crypto_candles(symbol, resolution, from, to, opts = {})
      data, _status_code, _headers = crypto_candles_with_http_info(symbol, resolution, from, to, opts)
      data
    end

    # Crypto Candles
    # Get candlestick data for crypto symbols.
    # @param symbol [String] Use symbol returned in &lt;code&gt;/crypto/symbol&lt;/code&gt; endpoint for this field.
    # @param resolution [String] Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
    # @param from [Integer] UNIX timestamp. Interval initial value.
    # @param to [Integer] UNIX timestamp. Interval end value.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CryptoCandles, Integer, Hash)>] CryptoCandles data, response status code and response headers
    def crypto_candles_with_http_info(symbol, resolution, from, to, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.crypto_candles ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling DefaultApi.crypto_candles"
      end
      # verify the required parameter 'resolution' is set
      if @api_client.config.client_side_validation && resolution.nil?
        fail ArgumentError, "Missing the required parameter 'resolution' when calling DefaultApi.crypto_candles"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.crypto_candles"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling DefaultApi.crypto_candles"
      end
      # resource path
      local_var_path = '/crypto/candle'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbol'] = symbol
      query_params[:'resolution'] = resolution
      query_params[:'from'] = from
      query_params[:'to'] = to

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'CryptoCandles' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#crypto_candles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Crypto Exchanges
    # List supported crypto exchanges
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def crypto_exchanges(opts = {})
      data, _status_code, _headers = crypto_exchanges_with_http_info(opts)
      data
    end

    # Crypto Exchanges
    # List supported crypto exchanges
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Integer, Hash)>] Array<String> data, response status code and response headers
    def crypto_exchanges_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.crypto_exchanges ...'
      end
      # resource path
      local_var_path = '/crypto/exchange'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<String>' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#crypto_exchanges\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Crypto Symbol
    # List supported crypto symbols by exchange
    # @param exchange [String] Exchange you want to get the list of symbols from.
    # @param [Hash] opts the optional parameters
    # @return [Array<CryptoSymbol>]
    def crypto_symbols(exchange, opts = {})
      data, _status_code, _headers = crypto_symbols_with_http_info(exchange, opts)
      data
    end

    # Crypto Symbol
    # List supported crypto symbols by exchange
    # @param exchange [String] Exchange you want to get the list of symbols from.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CryptoSymbol>, Integer, Hash)>] Array<CryptoSymbol> data, response status code and response headers
    def crypto_symbols_with_http_info(exchange, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.crypto_symbols ...'
      end
      # verify the required parameter 'exchange' is set
      if @api_client.config.client_side_validation && exchange.nil?
        fail ArgumentError, "Missing the required parameter 'exchange' when calling DefaultApi.crypto_symbols"
      end
      # resource path
      local_var_path = '/crypto/symbol'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'exchange'] = exchange

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<CryptoSymbol>' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#crypto_symbols\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Earnings Calendar
    # Get historical and coming earnings release dating back to 2003. You can setup <a href=\"#webhook\">webhook</a> to receive real-time earnings update.
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :from From date: 2020-03-15.
    # @option opts [Date] :to To date: 2020-03-16.
    # @option opts [String] :symbol Filter by symbol: AAPL.
    # @option opts [Boolean] :international Set to &lt;code&gt;true&lt;/code&gt; to include international markets. Default value is &lt;code&gt;false&lt;/code&gt;
    # @return [EarningsCalendar]
    def earnings_calendar(opts = {})
      data, _status_code, _headers = earnings_calendar_with_http_info(opts)
      data
    end

    # Earnings Calendar
    # Get historical and coming earnings release dating back to 2003. You can setup &lt;a href&#x3D;\&quot;#webhook\&quot;&gt;webhook&lt;/a&gt; to receive real-time earnings update.
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :from From date: 2020-03-15.
    # @option opts [Date] :to To date: 2020-03-16.
    # @option opts [String] :symbol Filter by symbol: AAPL.
    # @option opts [Boolean] :international Set to &lt;code&gt;true&lt;/code&gt; to include international markets. Default value is &lt;code&gt;false&lt;/code&gt;
    # @return [Array<(EarningsCalendar, Integer, Hash)>] EarningsCalendar data, response status code and response headers
    def earnings_calendar_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.earnings_calendar ...'
      end
      # resource path
      local_var_path = '/calendar/earnings'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?
      query_params[:'symbol'] = opts[:'symbol'] if !opts[:'symbol'].nil?
      query_params[:'international'] = opts[:'international'] if !opts[:'international'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'EarningsCalendar' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#earnings_calendar\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Economic Code
    # List codes of supported economic data.
    # @param [Hash] opts the optional parameters
    # @return [Array<EconomicCode>]
    def economic_code(opts = {})
      data, _status_code, _headers = economic_code_with_http_info(opts)
      data
    end

    # Economic Code
    # List codes of supported economic data.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<EconomicCode>, Integer, Hash)>] Array<EconomicCode> data, response status code and response headers
    def economic_code_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.economic_code ...'
      end
      # resource path
      local_var_path = '/economic/code'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<EconomicCode>' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#economic_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Economic Data
    # Get economic data.
    # @param code [String] Economic code.
    # @param [Hash] opts the optional parameters
    # @return [EconomicData]
    def economic_data(code, opts = {})
      data, _status_code, _headers = economic_data_with_http_info(code, opts)
      data
    end

    # Economic Data
    # Get economic data.
    # @param code [String] Economic code.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EconomicData, Integer, Hash)>] EconomicData data, response status code and response headers
    def economic_data_with_http_info(code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.economic_data ...'
      end
      # verify the required parameter 'code' is set
      if @api_client.config.client_side_validation && code.nil?
        fail ArgumentError, "Missing the required parameter 'code' when calling DefaultApi.economic_data"
      end
      # resource path
      local_var_path = '/economic'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'code'] = code

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'EconomicData' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#economic_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # ETFs Country Exposure
    # Get ETF country exposure data.
    # @param symbol [String] ETF symbol.
    # @param [Hash] opts the optional parameters
    # @return [ETFsCountryExposure]
    def etfs_country_exposure(symbol, opts = {})
      data, _status_code, _headers = etfs_country_exposure_with_http_info(symbol, opts)
      data
    end

    # ETFs Country Exposure
    # Get ETF country exposure data.
    # @param symbol [String] ETF symbol.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ETFsCountryExposure, Integer, Hash)>] ETFsCountryExposure data, response status code and response headers
    def etfs_country_exposure_with_http_info(symbol, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.etfs_country_exposure ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling DefaultApi.etfs_country_exposure"
      end
      # resource path
      local_var_path = '/etf/country'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbol'] = symbol

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ETFsCountryExposure' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#etfs_country_exposure\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # ETFs Holdings
    # Get current ETF holdings.
    # @param symbol [String] ETF symbol.
    # @param [Hash] opts the optional parameters
    # @return [ETFsHoldings]
    def etfs_holdings(symbol, opts = {})
      data, _status_code, _headers = etfs_holdings_with_http_info(symbol, opts)
      data
    end

    # ETFs Holdings
    # Get current ETF holdings.
    # @param symbol [String] ETF symbol.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ETFsHoldings, Integer, Hash)>] ETFsHoldings data, response status code and response headers
    def etfs_holdings_with_http_info(symbol, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.etfs_holdings ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling DefaultApi.etfs_holdings"
      end
      # resource path
      local_var_path = '/etf/holdings'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbol'] = symbol

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ETFsHoldings' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#etfs_holdings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # ETFs Industry Exposure
    # Get ETF industry exposure data.
    # @param symbol [String] ETF symbol.
    # @param [Hash] opts the optional parameters
    # @return [ETFsIndustryExposure]
    def etfs_industry_exposure(symbol, opts = {})
      data, _status_code, _headers = etfs_industry_exposure_with_http_info(symbol, opts)
      data
    end

    # ETFs Industry Exposure
    # Get ETF industry exposure data.
    # @param symbol [String] ETF symbol.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ETFsIndustryExposure, Integer, Hash)>] ETFsIndustryExposure data, response status code and response headers
    def etfs_industry_exposure_with_http_info(symbol, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.etfs_industry_exposure ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling DefaultApi.etfs_industry_exposure"
      end
      # resource path
      local_var_path = '/etf/sector'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbol'] = symbol

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ETFsIndustryExposure' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#etfs_industry_exposure\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # ETFs Profile
    # Get ETF profile information. Currently support all US ETFs.
    # @param symbol [String] ETF symbol.
    # @param [Hash] opts the optional parameters
    # @return [ETFsProfile]
    def etfs_profile(symbol, opts = {})
      data, _status_code, _headers = etfs_profile_with_http_info(symbol, opts)
      data
    end

    # ETFs Profile
    # Get ETF profile information. Currently support all US ETFs.
    # @param symbol [String] ETF symbol.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ETFsProfile, Integer, Hash)>] ETFsProfile data, response status code and response headers
    def etfs_profile_with_http_info(symbol, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.etfs_profile ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling DefaultApi.etfs_profile"
      end
      # resource path
      local_var_path = '/etf/profile'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbol'] = symbol

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ETFsProfile' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#etfs_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Filings
    # List company's filing. Limit to 250 documents at a time. This data is available for bulk download on <a href=\"https://www.kaggle.com/finnhub/sec-filings\" target=\"_blank\">Kaggle SEC Filings database</a>.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :symbol Symbol. Leave &lt;code&gt;symbol&lt;/code&gt;,&lt;code&gt;cik&lt;/code&gt; and &lt;code&gt;accessNumber&lt;/code&gt; empty to list latest filings.
    # @option opts [String] :cik CIK.
    # @option opts [String] :access_number Access number of a specific report you want to retrieve data from.
    # @option opts [String] :form Filter by form. You can use this value &lt;code&gt;NT 10-K&lt;/code&gt; to find non-timely filings for a company.
    # @option opts [Date] :from From date: 2020-03-15.
    # @option opts [Date] :to To date: 2020-03-16.
    # @return [Array<Filing>]
    def filings(opts = {})
      data, _status_code, _headers = filings_with_http_info(opts)
      data
    end

    # Filings
    # List company&#39;s filing. Limit to 250 documents at a time. This data is available for bulk download on &lt;a href&#x3D;\&quot;https://www.kaggle.com/finnhub/sec-filings\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Kaggle SEC Filings database&lt;/a&gt;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :symbol Symbol. Leave &lt;code&gt;symbol&lt;/code&gt;,&lt;code&gt;cik&lt;/code&gt; and &lt;code&gt;accessNumber&lt;/code&gt; empty to list latest filings.
    # @option opts [String] :cik CIK.
    # @option opts [String] :access_number Access number of a specific report you want to retrieve data from.
    # @option opts [String] :form Filter by form. You can use this value &lt;code&gt;NT 10-K&lt;/code&gt; to find non-timely filings for a company.
    # @option opts [Date] :from From date: 2020-03-15.
    # @option opts [Date] :to To date: 2020-03-16.
    # @return [Array<(Array<Filing>, Integer, Hash)>] Array<Filing> data, response status code and response headers
    def filings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.filings ...'
      end
      # resource path
      local_var_path = '/stock/filings'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbol'] = opts[:'symbol'] if !opts[:'symbol'].nil?
      query_params[:'cik'] = opts[:'cik'] if !opts[:'cik'].nil?
      query_params[:'accessNumber'] = opts[:'access_number'] if !opts[:'access_number'].nil?
      query_params[:'form'] = opts[:'form'] if !opts[:'form'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Filing>' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#filings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Financial Statements
    # Get standardized balance sheet, income statement and cash flow for global companies going back 30+ years.
    # @param symbol [String] Symbol of the company: AAPL.
    # @param statement [String] Statement can take 1 of these values &lt;code&gt;bs, ic, cf&lt;/code&gt; for Balance Sheet, Income Statement, Cash Flow respectively.
    # @param freq [String] Frequency can take 1 of these values &lt;code&gt;annual, quarterly, ttm, ytd&lt;/code&gt;.  TTM (Trailing Twelve Months) option is available for Income Statement and Cash Flow. YTD (Year To Date) option is only available for Cash Flow.
    # @param [Hash] opts the optional parameters
    # @return [FinancialStatements]
    def financials(symbol, statement, freq, opts = {})
      data, _status_code, _headers = financials_with_http_info(symbol, statement, freq, opts)
      data
    end

    # Financial Statements
    # Get standardized balance sheet, income statement and cash flow for global companies going back 30+ years.
    # @param symbol [String] Symbol of the company: AAPL.
    # @param statement [String] Statement can take 1 of these values &lt;code&gt;bs, ic, cf&lt;/code&gt; for Balance Sheet, Income Statement, Cash Flow respectively.
    # @param freq [String] Frequency can take 1 of these values &lt;code&gt;annual, quarterly, ttm, ytd&lt;/code&gt;.  TTM (Trailing Twelve Months) option is available for Income Statement and Cash Flow. YTD (Year To Date) option is only available for Cash Flow.
    # @param [Hash] opts the optional parameters
    # @return [Array<(FinancialStatements, Integer, Hash)>] FinancialStatements data, response status code and response headers
    def financials_with_http_info(symbol, statement, freq, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.financials ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling DefaultApi.financials"
      end
      # verify the required parameter 'statement' is set
      if @api_client.config.client_side_validation && statement.nil?
        fail ArgumentError, "Missing the required parameter 'statement' when calling DefaultApi.financials"
      end
      # verify the required parameter 'freq' is set
      if @api_client.config.client_side_validation && freq.nil?
        fail ArgumentError, "Missing the required parameter 'freq' when calling DefaultApi.financials"
      end
      # resource path
      local_var_path = '/stock/financials'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbol'] = symbol
      query_params[:'statement'] = statement
      query_params[:'freq'] = freq

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'FinancialStatements' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#financials\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Financials As Reported
    # Get financials as reported. This data is available for bulk download on <a href=\"https://www.kaggle.com/finnhub/reported-financials\" target=\"_blank\">Kaggle SEC Financials database</a>.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :symbol Symbol.
    # @option opts [String] :cik CIK.
    # @option opts [String] :access_number Access number of a specific report you want to retrieve financials from.
    # @option opts [String] :freq Frequency. Can be either &lt;code&gt;annual&lt;/code&gt; or &lt;code&gt;quarterly&lt;/code&gt;. Default to &lt;code&gt;annual&lt;/code&gt;.
    # @return [FinancialsAsReported]
    def financials_reported(opts = {})
      data, _status_code, _headers = financials_reported_with_http_info(opts)
      data
    end

    # Financials As Reported
    # Get financials as reported. This data is available for bulk download on &lt;a href&#x3D;\&quot;https://www.kaggle.com/finnhub/reported-financials\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Kaggle SEC Financials database&lt;/a&gt;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :symbol Symbol.
    # @option opts [String] :cik CIK.
    # @option opts [String] :access_number Access number of a specific report you want to retrieve financials from.
    # @option opts [String] :freq Frequency. Can be either &lt;code&gt;annual&lt;/code&gt; or &lt;code&gt;quarterly&lt;/code&gt;. Default to &lt;code&gt;annual&lt;/code&gt;.
    # @return [Array<(FinancialsAsReported, Integer, Hash)>] FinancialsAsReported data, response status code and response headers
    def financials_reported_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.financials_reported ...'
      end
      # resource path
      local_var_path = '/stock/financials-reported'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbol'] = opts[:'symbol'] if !opts[:'symbol'].nil?
      query_params[:'cik'] = opts[:'cik'] if !opts[:'cik'].nil?
      query_params[:'accessNumber'] = opts[:'access_number'] if !opts[:'access_number'].nil?
      query_params[:'freq'] = opts[:'freq'] if !opts[:'freq'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'FinancialsAsReported' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#financials_reported\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Forex Candles
    # Get candlestick data for forex symbols.
    # @param symbol [String] Use symbol returned in &lt;code&gt;/forex/symbol&lt;/code&gt; endpoint for this field.
    # @param resolution [String] Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
    # @param from [Integer] UNIX timestamp. Interval initial value.
    # @param to [Integer] UNIX timestamp. Interval end value.
    # @param [Hash] opts the optional parameters
    # @return [ForexCandles]
    def forex_candles(symbol, resolution, from, to, opts = {})
      data, _status_code, _headers = forex_candles_with_http_info(symbol, resolution, from, to, opts)
      data
    end

    # Forex Candles
    # Get candlestick data for forex symbols.
    # @param symbol [String] Use symbol returned in &lt;code&gt;/forex/symbol&lt;/code&gt; endpoint for this field.
    # @param resolution [String] Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
    # @param from [Integer] UNIX timestamp. Interval initial value.
    # @param to [Integer] UNIX timestamp. Interval end value.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ForexCandles, Integer, Hash)>] ForexCandles data, response status code and response headers
    def forex_candles_with_http_info(symbol, resolution, from, to, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.forex_candles ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling DefaultApi.forex_candles"
      end
      # verify the required parameter 'resolution' is set
      if @api_client.config.client_side_validation && resolution.nil?
        fail ArgumentError, "Missing the required parameter 'resolution' when calling DefaultApi.forex_candles"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.forex_candles"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling DefaultApi.forex_candles"
      end
      # resource path
      local_var_path = '/forex/candle'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbol'] = symbol
      query_params[:'resolution'] = resolution
      query_params[:'from'] = from
      query_params[:'to'] = to

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ForexCandles' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#forex_candles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Forex Exchanges
    # List supported forex exchanges
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def forex_exchanges(opts = {})
      data, _status_code, _headers = forex_exchanges_with_http_info(opts)
      data
    end

    # Forex Exchanges
    # List supported forex exchanges
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Integer, Hash)>] Array<String> data, response status code and response headers
    def forex_exchanges_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.forex_exchanges ...'
      end
      # resource path
      local_var_path = '/forex/exchange'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<String>' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#forex_exchanges\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Forex rates
    # Get rates for all forex pairs. Ideal for currency conversion
    # @param [Hash] opts the optional parameters
    # @option opts [String] :base Base currency. Default to EUR.
    # @return [Forexrates]
    def forex_rates(opts = {})
      data, _status_code, _headers = forex_rates_with_http_info(opts)
      data
    end

    # Forex rates
    # Get rates for all forex pairs. Ideal for currency conversion
    # @param [Hash] opts the optional parameters
    # @option opts [String] :base Base currency. Default to EUR.
    # @return [Array<(Forexrates, Integer, Hash)>] Forexrates data, response status code and response headers
    def forex_rates_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.forex_rates ...'
      end
      # resource path
      local_var_path = '/forex/rates'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'base'] = opts[:'base'] if !opts[:'base'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Forexrates' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#forex_rates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Forex Symbol
    # List supported forex symbols.
    # @param exchange [String] Exchange you want to get the list of symbols from.
    # @param [Hash] opts the optional parameters
    # @return [Array<ForexSymbol>]
    def forex_symbols(exchange, opts = {})
      data, _status_code, _headers = forex_symbols_with_http_info(exchange, opts)
      data
    end

    # Forex Symbol
    # List supported forex symbols.
    # @param exchange [String] Exchange you want to get the list of symbols from.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ForexSymbol>, Integer, Hash)>] Array<ForexSymbol> data, response status code and response headers
    def forex_symbols_with_http_info(exchange, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.forex_symbols ...'
      end
      # verify the required parameter 'exchange' is set
      if @api_client.config.client_side_validation && exchange.nil?
        fail ArgumentError, "Missing the required parameter 'exchange' when calling DefaultApi.forex_symbols"
      end
      # resource path
      local_var_path = '/forex/symbol'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'exchange'] = exchange

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<ForexSymbol>' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#forex_symbols\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fund Ownership
    # Get a full list fund and institutional investors of a company in descending order of the number of shares held.
    # @param symbol [String] Symbol of the company: AAPL.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Limit number of results. Leave empty to get the full list.
    # @return [FundOwnership]
    def fund_ownership(symbol, opts = {})
      data, _status_code, _headers = fund_ownership_with_http_info(symbol, opts)
      data
    end

    # Fund Ownership
    # Get a full list fund and institutional investors of a company in descending order of the number of shares held.
    # @param symbol [String] Symbol of the company: AAPL.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Limit number of results. Leave empty to get the full list.
    # @return [Array<(FundOwnership, Integer, Hash)>] FundOwnership data, response status code and response headers
    def fund_ownership_with_http_info(symbol, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.fund_ownership ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling DefaultApi.fund_ownership"
      end
      # resource path
      local_var_path = '/stock/fund-ownership'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbol'] = symbol
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'FundOwnership' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#fund_ownership\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # General News
    # Get latest market news.
    # @param category [String] This parameter can be 1 of the following values &lt;code&gt;general, forex, crypto, merger&lt;/code&gt;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :min_id Use this field to get only news after this ID. Default to 0
    # @return [Array<News>]
    def general_news(category, opts = {})
      data, _status_code, _headers = general_news_with_http_info(category, opts)
      data
    end

    # General News
    # Get latest market news.
    # @param category [String] This parameter can be 1 of the following values &lt;code&gt;general, forex, crypto, merger&lt;/code&gt;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :min_id Use this field to get only news after this ID. Default to 0
    # @return [Array<(Array<News>, Integer, Hash)>] Array<News> data, response status code and response headers
    def general_news_with_http_info(category, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.general_news ...'
      end
      # verify the required parameter 'category' is set
      if @api_client.config.client_side_validation && category.nil?
        fail ArgumentError, "Missing the required parameter 'category' when calling DefaultApi.general_news"
      end
      # resource path
      local_var_path = '/news'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'category'] = category
      query_params[:'minId'] = opts[:'min_id'] if !opts[:'min_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<News>' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#general_news\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Indices Constituents
    # Get a list of index's constituents. Currently support <code>^GSPC (S&P 500)</code>, <code>^NDX (Nasdaq 100)</code>, <code>^DJI (Dow Jones)</code>
    # @param [Hash] opts the optional parameters
    # @return [IndicesConstituents]
    def indices_constituents(opts = {})
      data, _status_code, _headers = indices_constituents_with_http_info(opts)
      data
    end

    # Indices Constituents
    # Get a list of index&#39;s constituents. Currently support &lt;code&gt;^GSPC (S&amp;P 500)&lt;/code&gt;, &lt;code&gt;^NDX (Nasdaq 100)&lt;/code&gt;, &lt;code&gt;^DJI (Dow Jones)&lt;/code&gt;
    # @param [Hash] opts the optional parameters
    # @return [Array<(IndicesConstituents, Integer, Hash)>] IndicesConstituents data, response status code and response headers
    def indices_constituents_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.indices_constituents ...'
      end
      # resource path
      local_var_path = '/index/constituents'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'IndicesConstituents' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#indices_constituents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Indices Historical Constituents
    # Get full history of index's constituents including symbols and dates of joining and leaving the Index. Currently support <code>^GSPC (S&P 500)</code>, <code>^NDX (Nasdaq 100)</code>, <code>^DJI (Dow Jones)</code>
    # @param [Hash] opts the optional parameters
    # @return [IndicesHistoricalConstituents]
    def indices_historical_constituents(opts = {})
      data, _status_code, _headers = indices_historical_constituents_with_http_info(opts)
      data
    end

    # Indices Historical Constituents
    # Get full history of index&#39;s constituents including symbols and dates of joining and leaving the Index. Currently support &lt;code&gt;^GSPC (S&amp;P 500)&lt;/code&gt;, &lt;code&gt;^NDX (Nasdaq 100)&lt;/code&gt;, &lt;code&gt;^DJI (Dow Jones)&lt;/code&gt;
    # @param [Hash] opts the optional parameters
    # @return [Array<(IndicesHistoricalConstituents, Integer, Hash)>] IndicesHistoricalConstituents data, response status code and response headers
    def indices_historical_constituents_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.indices_historical_constituents ...'
      end
      # resource path
      local_var_path = '/index/historical-constituents'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'IndicesHistoricalConstituents' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#indices_historical_constituents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Investors Ownership
    # Get a full list of shareholders/investors of a company in descending order of the number of shares held.
    # @param symbol [String] Symbol of the company: AAPL.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Limit number of results. Leave empty to get the full list.
    # @return [InvestorsOwnership]
    def investors_ownership(symbol, opts = {})
      data, _status_code, _headers = investors_ownership_with_http_info(symbol, opts)
      data
    end

    # Investors Ownership
    # Get a full list of shareholders/investors of a company in descending order of the number of shares held.
    # @param symbol [String] Symbol of the company: AAPL.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Limit number of results. Leave empty to get the full list.
    # @return [Array<(InvestorsOwnership, Integer, Hash)>] InvestorsOwnership data, response status code and response headers
    def investors_ownership_with_http_info(symbol, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.investors_ownership ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling DefaultApi.investors_ownership"
      end
      # resource path
      local_var_path = '/stock/investor-ownership'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbol'] = symbol
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InvestorsOwnership' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#investors_ownership\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # IPO Calendar
    # Get recent and coming IPO.
    # @param from [Date] From date: 2020-03-15.
    # @param to [Date] To date: 2020-03-16.
    # @param [Hash] opts the optional parameters
    # @return [IPOCalendar]
    def ipo_calendar(from, to, opts = {})
      data, _status_code, _headers = ipo_calendar_with_http_info(from, to, opts)
      data
    end

    # IPO Calendar
    # Get recent and coming IPO.
    # @param from [Date] From date: 2020-03-15.
    # @param to [Date] To date: 2020-03-16.
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPOCalendar, Integer, Hash)>] IPOCalendar data, response status code and response headers
    def ipo_calendar_with_http_info(from, to, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.ipo_calendar ...'
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.ipo_calendar"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling DefaultApi.ipo_calendar"
      end
      # resource path
      local_var_path = '/calendar/ipo'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from'] = from
      query_params[:'to'] = to

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'IPOCalendar' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#ipo_calendar\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Major Developments
    # List latest major developments of a company going back 20 years with 12M+ data points. This data can be used to highlight the most significant events.
    # @param symbol [String] Company symbol.
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :from From time: 2020-01-01.
    # @option opts [Date] :to To time: 2020-01-05.
    # @return [MajorDevelopments]
    def major_developments(symbol, opts = {})
      data, _status_code, _headers = major_developments_with_http_info(symbol, opts)
      data
    end

    # Major Developments
    # List latest major developments of a company going back 20 years with 12M+ data points. This data can be used to highlight the most significant events.
    # @param symbol [String] Company symbol.
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :from From time: 2020-01-01.
    # @option opts [Date] :to To time: 2020-01-05.
    # @return [Array<(MajorDevelopments, Integer, Hash)>] MajorDevelopments data, response status code and response headers
    def major_developments_with_http_info(symbol, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.major_developments ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling DefaultApi.major_developments"
      end
      # resource path
      local_var_path = '/major-development'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbol'] = symbol
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'MajorDevelopments' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#major_developments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # News Sentiment
    # Get company's news sentiment and statistics. This endpoint is only available for US companies.
    # @param symbol [String] Company symbol.
    # @param [Hash] opts the optional parameters
    # @return [NewsSentiment]
    def news_sentiment(symbol, opts = {})
      data, _status_code, _headers = news_sentiment_with_http_info(symbol, opts)
      data
    end

    # News Sentiment
    # Get company&#39;s news sentiment and statistics. This endpoint is only available for US companies.
    # @param symbol [String] Company symbol.
    # @param [Hash] opts the optional parameters
    # @return [Array<(NewsSentiment, Integer, Hash)>] NewsSentiment data, response status code and response headers
    def news_sentiment_with_http_info(symbol, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.news_sentiment ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling DefaultApi.news_sentiment"
      end
      # resource path
      local_var_path = '/news-sentiment'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbol'] = symbol

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'NewsSentiment' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#news_sentiment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Pattern Recognition
    # Run pattern recognition algorithm on a symbol. Support double top/bottom, triple top/bottom, head and shoulders, triangle, wedge, channel, flag, and candlestick patterns.
    # @param symbol [String] Symbol
    # @param resolution [String] Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
    # @param [Hash] opts the optional parameters
    # @return [PatternRecognition]
    def pattern_recognition(symbol, resolution, opts = {})
      data, _status_code, _headers = pattern_recognition_with_http_info(symbol, resolution, opts)
      data
    end

    # Pattern Recognition
    # Run pattern recognition algorithm on a symbol. Support double top/bottom, triple top/bottom, head and shoulders, triangle, wedge, channel, flag, and candlestick patterns.
    # @param symbol [String] Symbol
    # @param resolution [String] Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PatternRecognition, Integer, Hash)>] PatternRecognition data, response status code and response headers
    def pattern_recognition_with_http_info(symbol, resolution, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.pattern_recognition ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling DefaultApi.pattern_recognition"
      end
      # verify the required parameter 'resolution' is set
      if @api_client.config.client_side_validation && resolution.nil?
        fail ArgumentError, "Missing the required parameter 'resolution' when calling DefaultApi.pattern_recognition"
      end
      # resource path
      local_var_path = '/scan/pattern'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbol'] = symbol
      query_params[:'resolution'] = resolution

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'PatternRecognition' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#pattern_recognition\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Price Target
    # Get latest price target consensus.
    # @param symbol [String] Symbol of the company: AAPL.
    # @param [Hash] opts the optional parameters
    # @return [PriceTarget]
    def price_target(symbol, opts = {})
      data, _status_code, _headers = price_target_with_http_info(symbol, opts)
      data
    end

    # Price Target
    # Get latest price target consensus.
    # @param symbol [String] Symbol of the company: AAPL.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PriceTarget, Integer, Hash)>] PriceTarget data, response status code and response headers
    def price_target_with_http_info(symbol, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.price_target ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling DefaultApi.price_target"
      end
      # resource path
      local_var_path = '/stock/price-target'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbol'] = symbol

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'PriceTarget' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#price_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Quote
    # <p>Get real-time quote data for US stocks. Constant polling is not recommended. Use websocket if you need real-time update.</p><p>Real-time stock prices for international markets are supported for Enterprise clients via our partner's feed. <a href=\"mailto:support@finnhub.io\">Contact Us</a> to learn more.</p>
    # @param symbol [String] Symbol
    # @param [Hash] opts the optional parameters
    # @return [Quote]
    def quote(symbol, opts = {})
      data, _status_code, _headers = quote_with_http_info(symbol, opts)
      data
    end

    # Quote
    # &lt;p&gt;Get real-time quote data for US stocks. Constant polling is not recommended. Use websocket if you need real-time update.&lt;/p&gt;&lt;p&gt;Real-time stock prices for international markets are supported for Enterprise clients via our partner&#39;s feed. &lt;a href&#x3D;\&quot;mailto:support@finnhub.io\&quot;&gt;Contact Us&lt;/a&gt; to learn more.&lt;/p&gt;
    # @param symbol [String] Symbol
    # @param [Hash] opts the optional parameters
    # @return [Array<(Quote, Integer, Hash)>] Quote data, response status code and response headers
    def quote_with_http_info(symbol, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.quote ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling DefaultApi.quote"
      end
      # resource path
      local_var_path = '/quote'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbol'] = symbol

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Quote' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#quote\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Recommendation Trends
    # Get latest analyst recommendation trends for a company.
    # @param symbol [String] Symbol of the company: AAPL.
    # @param [Hash] opts the optional parameters
    # @return [Array<RecommendationTrend>]
    def recommendation_trends(symbol, opts = {})
      data, _status_code, _headers = recommendation_trends_with_http_info(symbol, opts)
      data
    end

    # Recommendation Trends
    # Get latest analyst recommendation trends for a company.
    # @param symbol [String] Symbol of the company: AAPL.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<RecommendationTrend>, Integer, Hash)>] Array<RecommendationTrend> data, response status code and response headers
    def recommendation_trends_with_http_info(symbol, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.recommendation_trends ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling DefaultApi.recommendation_trends"
      end
      # resource path
      local_var_path = '/stock/recommendation'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbol'] = symbol

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<RecommendationTrend>' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#recommendation_trends\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Similarity Index
    # <p>Calculate the textual difference between a company's 10-K / 10-Q reports and the same type of report in the previous year using Cosine Similarity. For example, this endpoint compares 2019's 10-K with 2018's 10-K. Companies breaking from its routines in disclosure of financial condition and risk analysis section can signal a significant change in the company's stock price in the upcoming 4 quarters.</p>
    # @param [Hash] opts the optional parameters
    # @option opts [String] :symbol Symbol. Required if cik is empty
    # @option opts [String] :cik CIK. Required if symbol is empty
    # @option opts [String] :freq &lt;code&gt;annual&lt;/code&gt; or &lt;code&gt;quarterly&lt;/code&gt;. Default to &lt;code&gt;annual&lt;/code&gt;
    # @return [SimilarityIndex]
    def similarity_index(opts = {})
      data, _status_code, _headers = similarity_index_with_http_info(opts)
      data
    end

    # Similarity Index
    # &lt;p&gt;Calculate the textual difference between a company&#39;s 10-K / 10-Q reports and the same type of report in the previous year using Cosine Similarity. For example, this endpoint compares 2019&#39;s 10-K with 2018&#39;s 10-K. Companies breaking from its routines in disclosure of financial condition and risk analysis section can signal a significant change in the company&#39;s stock price in the upcoming 4 quarters.&lt;/p&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :symbol Symbol. Required if cik is empty
    # @option opts [String] :cik CIK. Required if symbol is empty
    # @option opts [String] :freq &lt;code&gt;annual&lt;/code&gt; or &lt;code&gt;quarterly&lt;/code&gt;. Default to &lt;code&gt;annual&lt;/code&gt;
    # @return [Array<(SimilarityIndex, Integer, Hash)>] SimilarityIndex data, response status code and response headers
    def similarity_index_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.similarity_index ...'
      end
      # resource path
      local_var_path = '/stock/similarity-index'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbol'] = opts[:'symbol'] if !opts[:'symbol'].nil?
      query_params[:'cik'] = opts[:'cik'] if !opts[:'cik'].nil?
      query_params[:'freq'] = opts[:'freq'] if !opts[:'freq'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'SimilarityIndex' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#similarity_index\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Last Bid-Ask
    # Get last bid/ask data for US stocks.
    # @param symbol [String] Symbol.
    # @param [Hash] opts the optional parameters
    # @return [LastBidAsk]
    def stock_bidask(symbol, opts = {})
      data, _status_code, _headers = stock_bidask_with_http_info(symbol, opts)
      data
    end

    # Last Bid-Ask
    # Get last bid/ask data for US stocks.
    # @param symbol [String] Symbol.
    # @param [Hash] opts the optional parameters
    # @return [Array<(LastBidAsk, Integer, Hash)>] LastBidAsk data, response status code and response headers
    def stock_bidask_with_http_info(symbol, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.stock_bidask ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling DefaultApi.stock_bidask"
      end
      # resource path
      local_var_path = '/stock/bidask'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbol'] = symbol

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'LastBidAsk' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#stock_bidask\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Stock Candles
    # <p>Get candlestick data for stocks going back 25 years for US stocks.</p><p>Real-time stock prices for international markets are supported for Enterprise clients via our partner's feed. <a href=\"mailto:support@finnhub.io\">Contact Us</a> to learn more.</p>
    # @param symbol [String] Symbol.
    # @param resolution [String] Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
    # @param from [Integer] UNIX timestamp. Interval initial value.
    # @param to [Integer] UNIX timestamp. Interval end value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :adjusted By default, &lt;code&gt;adjusted&#x3D;false&lt;/code&gt;. Use &lt;code&gt;true&lt;/code&gt; to get adjusted data.
    # @return [StockCandles]
    def stock_candles(symbol, resolution, from, to, opts = {})
      data, _status_code, _headers = stock_candles_with_http_info(symbol, resolution, from, to, opts)
      data
    end

    # Stock Candles
    # &lt;p&gt;Get candlestick data for stocks going back 25 years for US stocks.&lt;/p&gt;&lt;p&gt;Real-time stock prices for international markets are supported for Enterprise clients via our partner&#39;s feed. &lt;a href&#x3D;\&quot;mailto:support@finnhub.io\&quot;&gt;Contact Us&lt;/a&gt; to learn more.&lt;/p&gt;
    # @param symbol [String] Symbol.
    # @param resolution [String] Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
    # @param from [Integer] UNIX timestamp. Interval initial value.
    # @param to [Integer] UNIX timestamp. Interval end value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :adjusted By default, &lt;code&gt;adjusted&#x3D;false&lt;/code&gt;. Use &lt;code&gt;true&lt;/code&gt; to get adjusted data.
    # @return [Array<(StockCandles, Integer, Hash)>] StockCandles data, response status code and response headers
    def stock_candles_with_http_info(symbol, resolution, from, to, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.stock_candles ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling DefaultApi.stock_candles"
      end
      # verify the required parameter 'resolution' is set
      if @api_client.config.client_side_validation && resolution.nil?
        fail ArgumentError, "Missing the required parameter 'resolution' when calling DefaultApi.stock_candles"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.stock_candles"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling DefaultApi.stock_candles"
      end
      # resource path
      local_var_path = '/stock/candle'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbol'] = symbol
      query_params[:'resolution'] = resolution
      query_params[:'from'] = from
      query_params[:'to'] = to
      query_params[:'adjusted'] = opts[:'adjusted'] if !opts[:'adjusted'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'StockCandles' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#stock_candles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Dividends
    # Get dividends data for common stocks going back 30 years.
    # @param symbol [String] Symbol.
    # @param from [Date] YYYY-MM-DD.
    # @param to [Date] YYYY-MM-DD.
    # @param [Hash] opts the optional parameters
    # @return [Array<Dividends>]
    def stock_dividends(symbol, from, to, opts = {})
      data, _status_code, _headers = stock_dividends_with_http_info(symbol, from, to, opts)
      data
    end

    # Dividends
    # Get dividends data for common stocks going back 30 years.
    # @param symbol [String] Symbol.
    # @param from [Date] YYYY-MM-DD.
    # @param to [Date] YYYY-MM-DD.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Dividends>, Integer, Hash)>] Array<Dividends> data, response status code and response headers
    def stock_dividends_with_http_info(symbol, from, to, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.stock_dividends ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling DefaultApi.stock_dividends"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.stock_dividends"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling DefaultApi.stock_dividends"
      end
      # resource path
      local_var_path = '/stock/dividend'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbol'] = symbol
      query_params[:'from'] = from
      query_params[:'to'] = to

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Dividends>' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#stock_dividends\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Splits
    # Get splits data for stocks.
    # @param symbol [String] Symbol.
    # @param from [Date] YYYY-MM-DD.
    # @param to [Date] YYYY-MM-DD.
    # @param [Hash] opts the optional parameters
    # @return [Array<Split>]
    def stock_splits(symbol, from, to, opts = {})
      data, _status_code, _headers = stock_splits_with_http_info(symbol, from, to, opts)
      data
    end

    # Splits
    # Get splits data for stocks.
    # @param symbol [String] Symbol.
    # @param from [Date] YYYY-MM-DD.
    # @param to [Date] YYYY-MM-DD.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Split>, Integer, Hash)>] Array<Split> data, response status code and response headers
    def stock_splits_with_http_info(symbol, from, to, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.stock_splits ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling DefaultApi.stock_splits"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.stock_splits"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling DefaultApi.stock_splits"
      end
      # resource path
      local_var_path = '/stock/split'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbol'] = symbol
      query_params[:'from'] = from
      query_params[:'to'] = to

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Split>' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#stock_splits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Stock Symbol
    # List supported stocks. A list of supported CFD Indices can be found <a href=\"https://docs.google.com/spreadsheets/d/1BAbIXBgl405fj0oHeEyRFEu8mW4QD1PhvtaBATLoR14/edit?usp=sharing\" target=\"_blank\">here</a>.
    # @param exchange [String] Exchange you want to get the list of symbols from. List of exchanges with fundamental data can be found &lt;a href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1I3pBxjfXB056-g_JYf_6o3Rns3BV2kMGG1nCatb91ls/edit?usp&#x3D;sharing\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt;.
    # @param [Hash] opts the optional parameters
    # @return [Array<Stock>]
    def stock_symbols(exchange, opts = {})
      data, _status_code, _headers = stock_symbols_with_http_info(exchange, opts)
      data
    end

    # Stock Symbol
    # List supported stocks. A list of supported CFD Indices can be found &lt;a href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1BAbIXBgl405fj0oHeEyRFEu8mW4QD1PhvtaBATLoR14/edit?usp&#x3D;sharing\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt;.
    # @param exchange [String] Exchange you want to get the list of symbols from. List of exchanges with fundamental data can be found &lt;a href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1I3pBxjfXB056-g_JYf_6o3Rns3BV2kMGG1nCatb91ls/edit?usp&#x3D;sharing\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Stock>, Integer, Hash)>] Array<Stock> data, response status code and response headers
    def stock_symbols_with_http_info(exchange, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.stock_symbols ...'
      end
      # verify the required parameter 'exchange' is set
      if @api_client.config.client_side_validation && exchange.nil?
        fail ArgumentError, "Missing the required parameter 'exchange' when calling DefaultApi.stock_symbols"
      end
      # resource path
      local_var_path = '/stock/symbol'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'exchange'] = exchange

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Stock>' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#stock_symbols\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Tick Data
    # <p>Get historical tick data for US stocks from all 13 exchanges. You can send the request directly to our tick server at <a href=\"https://tick.finnhub.io/\">https://tick.finnhub.io/</a> with the same path and parameters or get redirected there if you call our main server. Data is updated at the end of each trading day.</p><p>Tick data from 1985 is available for Enterprise clients. <a href=\"mailto:support@finnhub.io\">Contact us</a> to learn more.</p>
    # @param symbol [String] Symbol.
    # @param date [Date] Date: 2020-04-02.
    # @param limit [Integer] Limit number of ticks returned. Maximum value: &lt;code&gt;25000&lt;/code&gt;
    # @param skip [Integer] Number of ticks to skip. Use this parameter to loop through the entire data.
    # @param [Hash] opts the optional parameters
    # @return [TickData]
    def stock_tick(symbol, date, limit, skip, opts = {})
      data, _status_code, _headers = stock_tick_with_http_info(symbol, date, limit, skip, opts)
      data
    end

    # Tick Data
    # &lt;p&gt;Get historical tick data for US stocks from all 13 exchanges. You can send the request directly to our tick server at &lt;a href&#x3D;\&quot;https://tick.finnhub.io/\&quot;&gt;https://tick.finnhub.io/&lt;/a&gt; with the same path and parameters or get redirected there if you call our main server. Data is updated at the end of each trading day.&lt;/p&gt;&lt;p&gt;Tick data from 1985 is available for Enterprise clients. &lt;a href&#x3D;\&quot;mailto:support@finnhub.io\&quot;&gt;Contact us&lt;/a&gt; to learn more.&lt;/p&gt;
    # @param symbol [String] Symbol.
    # @param date [Date] Date: 2020-04-02.
    # @param limit [Integer] Limit number of ticks returned. Maximum value: &lt;code&gt;25000&lt;/code&gt;
    # @param skip [Integer] Number of ticks to skip. Use this parameter to loop through the entire data.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TickData, Integer, Hash)>] TickData data, response status code and response headers
    def stock_tick_with_http_info(symbol, date, limit, skip, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.stock_tick ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling DefaultApi.stock_tick"
      end
      # verify the required parameter 'date' is set
      if @api_client.config.client_side_validation && date.nil?
        fail ArgumentError, "Missing the required parameter 'date' when calling DefaultApi.stock_tick"
      end
      # verify the required parameter 'limit' is set
      if @api_client.config.client_side_validation && limit.nil?
        fail ArgumentError, "Missing the required parameter 'limit' when calling DefaultApi.stock_tick"
      end
      # verify the required parameter 'skip' is set
      if @api_client.config.client_side_validation && skip.nil?
        fail ArgumentError, "Missing the required parameter 'skip' when calling DefaultApi.stock_tick"
      end
      # resource path
      local_var_path = '/stock/tick'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbol'] = symbol
      query_params[:'date'] = date
      query_params[:'limit'] = limit
      query_params[:'skip'] = skip

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'TickData' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#stock_tick\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Support/Resistance
    # Get support and resistance levels for a symbol.
    # @param symbol [String] Symbol
    # @param resolution [String] Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
    # @param [Hash] opts the optional parameters
    # @return [SupportResistance]
    def support_resistance(symbol, resolution, opts = {})
      data, _status_code, _headers = support_resistance_with_http_info(symbol, resolution, opts)
      data
    end

    # Support/Resistance
    # Get support and resistance levels for a symbol.
    # @param symbol [String] Symbol
    # @param resolution [String] Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SupportResistance, Integer, Hash)>] SupportResistance data, response status code and response headers
    def support_resistance_with_http_info(symbol, resolution, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.support_resistance ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling DefaultApi.support_resistance"
      end
      # verify the required parameter 'resolution' is set
      if @api_client.config.client_side_validation && resolution.nil?
        fail ArgumentError, "Missing the required parameter 'resolution' when calling DefaultApi.support_resistance"
      end
      # resource path
      local_var_path = '/scan/support-resistance'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbol'] = symbol
      query_params[:'resolution'] = resolution

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'SupportResistance' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#support_resistance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Technical Indicators
    # Return technical indicator with price data. List of supported indicators can be found <a href=\"https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp=sharing\" target=\"_blank\">here</a>.
    # @param symbol [String] symbol
    # @param resolution [String] Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
    # @param from [Integer] UNIX timestamp. Interval initial value.
    # @param to [Integer] UNIX timestamp. Interval end value.
    # @param indicator [String] Indicator name. Full list can be found &lt;a href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp&#x3D;sharing\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt;.
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :indicator_fields Check out &lt;a href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp&#x3D;sharing\&quot; target&#x3D;\&quot;_blank\&quot;&gt;this page&lt;/a&gt; to see which indicators and params are supported.
    # @return [Object]
    def technical_indicator(symbol, resolution, from, to, indicator, opts = {})
      data, _status_code, _headers = technical_indicator_with_http_info(symbol, resolution, from, to, indicator, opts)
      data
    end

    # Technical Indicators
    # Return technical indicator with price data. List of supported indicators can be found &lt;a href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp&#x3D;sharing\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt;.
    # @param symbol [String] symbol
    # @param resolution [String] Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
    # @param from [Integer] UNIX timestamp. Interval initial value.
    # @param to [Integer] UNIX timestamp. Interval end value.
    # @param indicator [String] Indicator name. Full list can be found &lt;a href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp&#x3D;sharing\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt;.
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :indicator_fields Check out &lt;a href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp&#x3D;sharing\&quot; target&#x3D;\&quot;_blank\&quot;&gt;this page&lt;/a&gt; to see which indicators and params are supported.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def technical_indicator_with_http_info(symbol, resolution, from, to, indicator, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.technical_indicator ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling DefaultApi.technical_indicator"
      end
      # verify the required parameter 'resolution' is set
      if @api_client.config.client_side_validation && resolution.nil?
        fail ArgumentError, "Missing the required parameter 'resolution' when calling DefaultApi.technical_indicator"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.technical_indicator"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling DefaultApi.technical_indicator"
      end
      # verify the required parameter 'indicator' is set
      if @api_client.config.client_side_validation && indicator.nil?
        fail ArgumentError, "Missing the required parameter 'indicator' when calling DefaultApi.technical_indicator"
      end
      # resource path
      local_var_path = '/indicator'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbol'] = symbol
      query_params[:'resolution'] = resolution
      query_params[:'from'] = from
      query_params[:'to'] = to
      query_params[:'indicator'] = indicator

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'indicator_fields']) 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#technical_indicator\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Earnings Call Transcripts
    # <p>Get earnings call transcripts, audio and participants' list. This endpoint is only available for US companies. <p>17+ years of data is available with 170,000+ audio which add up to 6TB in size.</p>
    # @param id [String] Transcript&#39;s id obtained with &lt;a href&#x3D;\&quot;#transcripts-list\&quot;&gt;Transcripts List endpoint&lt;/a&gt;.
    # @param [Hash] opts the optional parameters
    # @return [EarningsCallTranscripts]
    def transcripts(id, opts = {})
      data, _status_code, _headers = transcripts_with_http_info(id, opts)
      data
    end

    # Earnings Call Transcripts
    # &lt;p&gt;Get earnings call transcripts, audio and participants&#39; list. This endpoint is only available for US companies. &lt;p&gt;17+ years of data is available with 170,000+ audio which add up to 6TB in size.&lt;/p&gt;
    # @param id [String] Transcript&#39;s id obtained with &lt;a href&#x3D;\&quot;#transcripts-list\&quot;&gt;Transcripts List endpoint&lt;/a&gt;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EarningsCallTranscripts, Integer, Hash)>] EarningsCallTranscripts data, response status code and response headers
    def transcripts_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.transcripts ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.transcripts"
      end
      # resource path
      local_var_path = '/stock/transcripts'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'EarningsCallTranscripts' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#transcripts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Earnings Call Transcripts List
    # List earnings call transcripts' metadata. This endpoint is only available for US companies.
    # @param symbol [String] Company symbol: AAPL. Leave empty to list the latest transcripts
    # @param [Hash] opts the optional parameters
    # @return [EarningsCallTranscriptsList]
    def transcripts_list(symbol, opts = {})
      data, _status_code, _headers = transcripts_list_with_http_info(symbol, opts)
      data
    end

    # Earnings Call Transcripts List
    # List earnings call transcripts&#39; metadata. This endpoint is only available for US companies.
    # @param symbol [String] Company symbol: AAPL. Leave empty to list the latest transcripts
    # @param [Hash] opts the optional parameters
    # @return [Array<(EarningsCallTranscriptsList, Integer, Hash)>] EarningsCallTranscriptsList data, response status code and response headers
    def transcripts_list_with_http_info(symbol, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.transcripts_list ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling DefaultApi.transcripts_list"
      end
      # resource path
      local_var_path = '/stock/transcripts/list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbol'] = symbol

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'EarningsCallTranscriptsList' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#transcripts_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Stock Upgrade/Downgrade
    # Get latest stock upgrade and downgrade.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :symbol Symbol of the company: AAPL. If left blank, the API will return latest stock upgrades/downgrades.
    # @option opts [Date] :from From date: 2000-03-15.
    # @option opts [Date] :to To date: 2020-03-16.
    # @return [Array<UpgradeDowngrade>]
    def upgrade_downgrade(opts = {})
      data, _status_code, _headers = upgrade_downgrade_with_http_info(opts)
      data
    end

    # Stock Upgrade/Downgrade
    # Get latest stock upgrade and downgrade.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :symbol Symbol of the company: AAPL. If left blank, the API will return latest stock upgrades/downgrades.
    # @option opts [Date] :from From date: 2000-03-15.
    # @option opts [Date] :to To date: 2020-03-16.
    # @return [Array<(Array<UpgradeDowngrade>, Integer, Hash)>] Array<UpgradeDowngrade> data, response status code and response headers
    def upgrade_downgrade_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.upgrade_downgrade ...'
      end
      # resource path
      local_var_path = '/stock/upgrade-downgrade'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbol'] = opts[:'symbol'] if !opts[:'symbol'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<UpgradeDowngrade>' 

      # auth_names
      auth_names = opts[:auth_names] || ['api_key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#upgrade_downgrade\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
